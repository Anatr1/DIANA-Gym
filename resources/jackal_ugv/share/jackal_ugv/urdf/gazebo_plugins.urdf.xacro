<?xml version="1.0"?>
<robot xmlns:xacro="http://www.ros.org/wiki/xacro">
  <gazebo reference="base_link">
    <turnGravityOff>false</turnGravityOff>
  </gazebo>

  <gazebo reference="chassis_link">
    <material>Gazebo/DarkGrey</material>
    <turnGravityOff>false</turnGravityOff>
  </gazebo>

  <gazebo reference="front_fender_link">
    <material>Gazebo/Yellow</material>
    <turnGravityOff>false</turnGravityOff>
  </gazebo>

  <gazebo reference="rear_fender_link">
    <material>Gazebo/Yellow</material>
    <turnGravityOff>false</turnGravityOff>
  </gazebo>

  <gazebo>
      <plugin name='skid_steer_drive' filename='libgazebo_ros_diff_drive.so'>
        <ros>
        </ros>
        <update_rate>30</update_rate>
        <num_wheel_pairs>2</num_wheel_pairs>
        <!-- wheels0 -->
        <left_joint>front_left_wheel</left_joint>
        <right_joint>front_right_wheel</right_joint>
        <!-- wheels1-->
        <left_joint>rear_left_wheel</left_joint>
        <right_joint>rear_right_wheel</right_joint>

        <!-- kinematics -->
        <wheel_separation>0.38</wheel_separation>
        <wheel_separation>0.38</wheel_separation>
        <wheel_diameter>0.2</wheel_diameter>
        <wheel_diameter>0.2</wheel_diameter>

        <!-- limits -->
        <max_wheel_torque>2</max_wheel_torque>
        <max_wheel_acceleration>20</max_wheel_acceleration>

        <!-- output -->
        <publish_odom>true</publish_odom>
        <publish_odom_tf>true</publish_odom_tf>
        <publish_wheel_tf>true</publish_wheel_tf>
        <odometry_frame>odom</odometry_frame>
        <robot_base_frame>base_link</robot_base_frame>

      </plugin>
  </gazebo>

  <!--It includes the IMU-->
  <xacro:if value="$(arg imu_enabled)">
    <gazebo reference="imu_link">
	    <turnGravityOff>false</turnGravityOff>
    </gazebo>

    <gazebo reference="imu_link">
      <sensor name="imu_sensor" type="imu">
      <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
          <ros>
            <namespace>/</namespace>
            <remapping>~/out:=imu/data</remapping>
          </ros>
          <initial_orientation_as_reference>false</initial_orientation_as_reference>
        </plugin>
        <always_on>true</always_on>
        <update_rate>100</update_rate>
        <visualize>true</visualize>
        <imu>
          <angular_velocity>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>2e-4</stddev>
                <bias_mean>0.0000075</bias_mean>
                <bias_stddev>0.0000008</bias_stddev>
              </noise>
            </z>
          </angular_velocity>
          <linear_acceleration>
            <x>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev>
              </noise>
            </x>
            <y>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev>
              </noise>
            </y>
            <z>
              <noise type="gaussian">
                <mean>0.0</mean>
                <stddev>1.7e-2</stddev>
                <bias_mean>0.1</bias_mean>
                <bias_stddev>0.001</bias_stddev>
              </noise>
            </z>
          </linear_acceleration>
        </imu>
      </sensor>
    </gazebo>
  </xacro:if>

  <xacro:if value="$(arg camera_enabled)">
    <gazebo reference="camera_color_frame">
          <sensor type="depth" name="sensor_d435">
              <always_on>1</always_on>
              <update_rate>30</update_rate>

              <camera name="camera">
                <horizontal_fov>${60*3.14/180.0}</horizontal_fov>
                <image>
                  <format>R8G8B8</format>
                  <width>640</width>
                  <height>480</height>
                </image>
                <clip>
                  <near>0.15</near>
                  <far>10.0</far>
                </clip>
              </camera>
              <plugin name="camera_plugin" filename="libgazebo_ros_camera.so">

                <ros>
                </ros>

                <!-- Set camera name. If empty, defaults to sensor name (i.e. "sensor_name") -->
                <camera_name>camera</camera_name>

                <!-- Set TF frame name. If empty, defaults to link name (i.e. "link_name") -->
                <frame_name>camera_color_frame</frame_name>

                <!--hack_baseline>0.07</hack_baseline-->
              </plugin>
            </sensor>
    </gazebo>
  </xacro:if>

  <xacro:if value="$(arg laser_enabled)">
    <gazebo reference="mid_laser_mount">
        <material>Gazebo/DarkGrey</material>    
    </gazebo>
      
    <gazebo reference="mid_laser_mount">
      <sensor type="ray" name="head_hokuyo_sensor">
      <visualize>false</visualize>
      <ray>
        <scan>
          <horizontal>
            <samples>360</samples>
            <resolution>1</resolution>
            <min_angle>0.0</min_angle>
            <max_angle>6.28</max_angle>
          </horizontal>
        </scan>
        <range>
        <!--Minimum range at 10 cm because below this value the plugin does not work well-->
          <min>0.30</min>
          <max>15.0</max>
          <resolution>0.02</resolution>
        </range>
        <!-- Using gazebo's noise instead of plugin's -->
        <noise>
          <type>gaussian</type>
          <mean>0.0</mean>
          <stddev>0.01</stddev>
        </noise>
      </ray>
      <!-- Using gazebo's update rate instead of plugin's -->
      <update_rate>30</update_rate>

      <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_ray_sensor.so">
        <!-- Change namespace and output topic so published topic is /rrbot/laser/scan -->
        <ros>
          <namespace>/</namespace>
          <argument>~/out:=scan</argument>
        </ros>
        <!-- Set output to sensor_msgs/LaserScan to get same output type as gazebo_ros_laser -->
        <output_type>sensor_msgs/LaserScan</output_type>
        <frame_name>mid_laser_mount</frame_name>
      </plugin>
    </sensor>
    </gazebo>
  </xacro:if>

  <xacro:if value="$(arg stereo_camera_enabled)">
    <gazebo reference="camera_infra1_frame">
          <sensor type="depth" name="sensor_d435">
              <always_on>1</always_on>
              <update_rate>30</update_rate>

              <camera name="camera_left">
                <horizontal_fov>${90*3.14/180.0}</horizontal_fov>
                <image>
                  <format>R8G8B8</format>
                  <width>1280</width>
                  <height>480</height>
                </image>
                <clip>
                  <near>0.15</near>
                  <far>10.0</far>
                </clip>
              </camera>
              <plugin name="camera_left_plugin" filename="libgazebo_ros_camera.so">

                <ros>
                  <!--<namespace>left_camera</namespace>-->
                  <argument>image_raw:=rgb</argument>
                  <argument>camera_info:=info</argument>
                </ros>

                <camera_name>camera</camera_name> 
                <baseline>0.05</baseline>
                <alwaysOn>true</alwaysOn>
                <updateRate>0.0</updateRate>
                <frame_name>camera_infra1_frame</frame_name>
                <distortionK1>0</distortionK1>
                <distortionK2>0</distortionK2>
                <distortionK3>0</distortionK3>
                <distortionT1>0</distortionT1>
                <distortionT2>0</distortionT2>
                <CxPrime>0</CxPrime>
                <Cx>0</Cx>
                <Cy>0</Cy>
                <focalLength>0</focalLength>
                <hackBaseline>0</hackBaseline>
                
              </plugin>
            </sensor>
    </gazebo>

    <gazebo reference="camera_infra2_frame">
          <sensor type="depth" name="sensor_d435">
              <always_on>1</always_on>
              <update_rate>30</update_rate>

              <camera name="camera_right">
                <horizontal_fov>${90*3.14/180.0}</horizontal_fov>
                <image>
                  <format>R8G8B8</format>
                  <width>1280</width>
                  <height>480</height>
                </image>
                <clip>
                  <near>0.15</near>
                  <far>10.0</far>
                </clip>
              </camera>
              <plugin name="camera_right_plugin" filename="libgazebo_ros_camera.so">

                <ros>
                  <namespace>right_camera</namespace>
                  <argument>image_raw:=rgb</argument>
                  <argument>camera_info:=info</argument>
                </ros>

                <camera_name>camera</camera_name>
                <baseline>0.05</baseline>
                <alwaysOn>true</alwaysOn>
                <updateRate>0.0</updateRate>
                <frame_name>camera_infra2_frame</frame_name>
                <distortionK1>0</distortionK1>
                <distortionK2>0</distortionK2>
                <distortionK3>0</distortionK3>
                <distortionT1>0</distortionT1>
                <distortionT2>0</distortionT2>
                <CxPrime>0</CxPrime>
                <Cx>0</Cx>
                <Cy>0</Cy>
                <focalLength>0</focalLength>
                <hackBaseline>0</hackBaseline>
                
              </plugin>
            </sensor>
    </gazebo>
  </xacro:if>
</robot>


 <!-- WARNING: DO NOT MODIFY THIS FILE UNLESS YOU KNOW WHAT YOU ARE DOING 
      (and are willing to get your hands dirty). This stuff breaks just by looking at it.
  
      Due to some unknown reason (to investigate), in the stereo camera part, I had to 
      leave namespace commented and camera_name equal to "camera" in the first camera plugin,
      otherwise nothing works. The second camera plugin seems to be unaffected by this problem 
      and I can comment or uncomment the namespace and change the camera_name to whatever and it works fine.

      There also seems to be a weird bug when parsing this XML. The parser does some weird stuff with the 
      commented lines and sometimes just adding a comment breaks the parser. 
      This is also why this comment is at the end of the file and not at the beginning.
 -->