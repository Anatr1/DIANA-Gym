<?xml version="1.0"?>
<robot xmlns:xacro="http://ros.org/wiki/xacro">

<xacro:macro name="husky_sim_plugin">
<gazebo>
    <plugin name='skid_steer_drive' filename='libgazebo_ros_diff_drive.so'>
      <ros>
      </ros>
      <update_rate>10</update_rate>
      <num_wheel_pairs>2</num_wheel_pairs>
      <!-- wheels0 -->
      <left_joint>front_left_wheel</left_joint>
      <right_joint>front_right_wheel</right_joint>
      <!-- wheels1-->
      <left_joint>rear_left_wheel</left_joint>
      <right_joint>rear_right_wheel</right_joint>

      <!-- kinematics -->
      <wheel_separation>0.57</wheel_separation>
      <wheel_separation>0.57</wheel_separation>
      <wheel_diameter>0.33</wheel_diameter>
      <wheel_diameter>0.33</wheel_diameter>

      <!-- limits -->
      <max_wheel_torque>20</max_wheel_torque>
      <max_wheel_acceleration>2</max_wheel_acceleration>

      <!-- output -->
      <publish_odom>true</publish_odom>
      <publish_odom_tf>true</publish_odom_tf>
      <publish_wheel_tf>true</publish_wheel_tf>
      <odometry_frame>odom</odometry_frame>
      <robot_base_frame>base_link</robot_base_frame>

    </plugin>
</gazebo>

<xacro:if value="$(arg imu_enabled)">
<gazebo reference="$(arg imu_frame_id)">
  <sensor name="imu_sensor" type="imu">
   <plugin filename="libgazebo_ros_imu_sensor.so" name="imu_plugin">
      <ros>
        <namespace>/</namespace>
        <remapping>~/out:=imu/data</remapping>
      </ros>
      <initial_orientation_as_reference>false</initial_orientation_as_reference>
    </plugin>
    <always_on>true</always_on>
    <update_rate>100</update_rate>
    <visualize>true</visualize>
    <imu>
      <angular_velocity>
        <x>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </x>
        <y>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </y>
        <z>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>2e-4</stddev>
            <bias_mean>0.0000075</bias_mean>
            <bias_stddev>0.0000008</bias_stddev>
          </noise>
        </z>
      </angular_velocity>
      <linear_acceleration>
        <x>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </x>
        <y>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </y>
        <z>
          <noise type="gaussian">
            <mean>0.0</mean>
            <stddev>1.7e-2</stddev>
            <bias_mean>0.1</bias_mean>
            <bias_stddev>0.001</bias_stddev>
          </noise>
        </z>
      </linear_acceleration>
    </imu>
  </sensor>
</gazebo>
</xacro:if>

<xacro:if value="$(arg laser_enabled)">
<gazebo reference="$(arg laser_frame_id)">
      <material>Gazebo/DarkGrey</material>    
</gazebo>
<gazebo reference="$(arg laser_frame_id)">
    <sensor type="ray" name="head_hokuyo_sensor">
    <visualize>false</visualize>
    <ray>
      <scan>
        <horizontal>
          <samples>360</samples>
          <resolution>1</resolution>
          <min_angle>0</min_angle>
          <max_angle>-6.28</max_angle>
        </horizontal>
      </scan>
      <range>
      <!--Minimum range at 35 cm because below this value the plugin detects the robot's body-->
        <min>0.55</min>
        <max>10.0</max>
        <resolution>0.05</resolution>
      </range>
      <!-- Using gazebo's noise instead of plugin's -->
      <noise>
        <type>gaussian</type>
        <mean>0.0</mean>
        <stddev>0.01</stddev>
      </noise>
    </ray>
    <!-- Using gazebo's update rate instead of plugin's -->
    <update_rate>30</update_rate>

    <plugin name="gazebo_ros_head_hokuyo_controller" filename="libgazebo_ros_ray_sensor.so">
      <!-- Change namespace and output topic so published topic is /rrbot/laser/scan -->
      <ros>
        <namespace>/laser</namespace>
        <argument>~/out:=scan</argument>
      </ros>
      <!-- Set output to sensor_msgs/LaserScan to get same output type as gazebo_ros_laser -->
      <output_type>sensor_msgs/LaserScan</output_type>
      <frame_name>laser_link</frame_name>
    </plugin>
  </sensor>
</gazebo>
</xacro:if>

<xacro:if value="$(arg camera_enabled)">
  <gazebo reference="$(arg camera_frame_id)">
    <sensor type="depth" name="d435">
      <always_on>1</always_on>
      <update_rate>30</update_rate>

      <camera name="camera">
        <horizontal_fov>${60*3.14/180.0}</horizontal_fov>
        <image>
          <format>R8G8B8</format>
          <width>640</width>
          <height>480</height>
        </image>
        <clip>
          <near>0.15</near>
          <far>10.0</far>
        </clip>
      </camera>
      <plugin name="camera_plugin" filename="libgazebo_ros_camera.so">

        <ros>
        </ros>

        <!-- Set camera name. If empty, defaults to sensor name (i.e. "sensor_name") -->
        <camera_name>camera</camera_name>

        <!-- Set TF frame name. If empty, defaults to link name (i.e. "link_name") -->
        <frame_name>camera_color_frame</frame_name>

        <!--hack_baseline>0.07</hack_baseline-->
      </plugin>
    </sensor>
  </gazebo>
</xacro:if>
</xacro:macro>
</robot>
